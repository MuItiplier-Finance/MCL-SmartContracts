/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DefaultReserveInterestRateStrategyInterface
  extends ethers.utils.Interface {
  functions: {
    "addressesProvider()": FunctionFragment;
    "baseVariableBorrowRate()": FunctionFragment;
    "calculateInterestRates(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "excessUtilizationRate()": FunctionFragment;
    "getBaseVariableBorrowRate()": FunctionFragment;
    "getStableRateSlope1()": FunctionFragment;
    "getStableRateSlope2()": FunctionFragment;
    "getVariableRateSlope1()": FunctionFragment;
    "getVariableRateSlope2()": FunctionFragment;
    "optimalUtilizationRate()": FunctionFragment;
    "reserve()": FunctionFragment;
    "stableRateSlope1()": FunctionFragment;
    "stableRateSlope2()": FunctionFragment;
    "variableRateSlope1()": FunctionFragment;
    "variableRateSlope2()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseVariableBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterestRates",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excessUtilizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseVariableBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStableRateSlope1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStableRateSlope2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVariableRateSlope1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVariableRateSlope2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimalUtilizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stableRateSlope1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableRateSlope2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "variableRateSlope1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "variableRateSlope2",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseVariableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterestRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excessUtilizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseVariableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableRateSlope1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableRateSlope2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVariableRateSlope1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVariableRateSlope2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimalUtilizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stableRateSlope1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableRateSlope2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variableRateSlope1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variableRateSlope2",
    data: BytesLike
  ): Result;

  events: {};
}

export class DefaultReserveInterestRateStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DefaultReserveInterestRateStrategyInterface;

  functions: {
    addressesProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "addressesProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    baseVariableBorrowRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "baseVariableBorrowRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calculateInterestRates(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      currentLiquidityRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "calculateInterestRates(address,uint256,uint256,uint256,uint256)"(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      currentLiquidityRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    excessUtilizationRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "excessUtilizationRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getBaseVariableBorrowRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getBaseVariableBorrowRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getStableRateSlope1(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getStableRateSlope1()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getStableRateSlope2(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getStableRateSlope2()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getVariableRateSlope1(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getVariableRateSlope1()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getVariableRateSlope2(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getVariableRateSlope2()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    optimalUtilizationRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "optimalUtilizationRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    reserve(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "reserve()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    stableRateSlope1(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "stableRateSlope1()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    stableRateSlope2(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "stableRateSlope2()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    variableRateSlope1(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "variableRateSlope1()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    variableRateSlope2(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "variableRateSlope2()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  "addressesProvider()"(overrides?: CallOverrides): Promise<string>;

  baseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  "baseVariableBorrowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  calculateInterestRates(
    _reserve: string,
    _availableLiquidity: BigNumberish,
    _totalBorrowsStable: BigNumberish,
    _totalBorrowsVariable: BigNumberish,
    _averageStableBorrowRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    currentLiquidityRate: BigNumber;
    currentStableBorrowRate: BigNumber;
    currentVariableBorrowRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "calculateInterestRates(address,uint256,uint256,uint256,uint256)"(
    _reserve: string,
    _availableLiquidity: BigNumberish,
    _totalBorrowsStable: BigNumberish,
    _totalBorrowsVariable: BigNumberish,
    _averageStableBorrowRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    currentLiquidityRate: BigNumber;
    currentStableBorrowRate: BigNumber;
    currentVariableBorrowRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  excessUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

  "excessUtilizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  "getBaseVariableBorrowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  getStableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

  "getStableRateSlope1()"(overrides?: CallOverrides): Promise<BigNumber>;

  getStableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

  "getStableRateSlope2()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVariableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

  "getVariableRateSlope1()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVariableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

  "getVariableRateSlope2()"(overrides?: CallOverrides): Promise<BigNumber>;

  optimalUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

  "optimalUtilizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  reserve(overrides?: CallOverrides): Promise<string>;

  "reserve()"(overrides?: CallOverrides): Promise<string>;

  stableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

  "stableRateSlope1()"(overrides?: CallOverrides): Promise<BigNumber>;

  stableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

  "stableRateSlope2()"(overrides?: CallOverrides): Promise<BigNumber>;

  variableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

  "variableRateSlope1()"(overrides?: CallOverrides): Promise<BigNumber>;

  variableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

  "variableRateSlope2()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addressesProvider(overrides?: CallOverrides): Promise<string>;

    "addressesProvider()"(overrides?: CallOverrides): Promise<string>;

    baseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "baseVariableBorrowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterestRates(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      currentLiquidityRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "calculateInterestRates(address,uint256,uint256,uint256,uint256)"(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      currentLiquidityRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    excessUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    "excessUtilizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseVariableBorrowRate()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    "getStableRateSlope1()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    "getStableRateSlope2()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    "getVariableRateSlope1()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    "getVariableRateSlope2()"(overrides?: CallOverrides): Promise<BigNumber>;

    optimalUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    "optimalUtilizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<string>;

    "reserve()"(overrides?: CallOverrides): Promise<string>;

    stableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    "stableRateSlope1()"(overrides?: CallOverrides): Promise<BigNumber>;

    stableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    "stableRateSlope2()"(overrides?: CallOverrides): Promise<BigNumber>;

    variableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    "variableRateSlope1()"(overrides?: CallOverrides): Promise<BigNumber>;

    variableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    "variableRateSlope2()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "addressesProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "baseVariableBorrowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterestRates(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInterestRates(address,uint256,uint256,uint256,uint256)"(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    excessUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    "excessUtilizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseVariableBorrowRate()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    "getStableRateSlope1()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    "getStableRateSlope2()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    "getVariableRateSlope1()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    "getVariableRateSlope2()"(overrides?: CallOverrides): Promise<BigNumber>;

    optimalUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    "optimalUtilizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    "reserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    stableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    "stableRateSlope1()"(overrides?: CallOverrides): Promise<BigNumber>;

    stableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    "stableRateSlope2()"(overrides?: CallOverrides): Promise<BigNumber>;

    variableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    "variableRateSlope1()"(overrides?: CallOverrides): Promise<BigNumber>;

    variableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    "variableRateSlope2()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addressesProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseVariableBorrowRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "baseVariableBorrowRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInterestRates(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateInterestRates(address,uint256,uint256,uint256,uint256)"(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    excessUtilizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "excessUtilizationRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseVariableBorrowRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBaseVariableBorrowRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStableRateSlope1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStableRateSlope1()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStableRateSlope2(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStableRateSlope2()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVariableRateSlope1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVariableRateSlope1()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVariableRateSlope2(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVariableRateSlope2()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimalUtilizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "optimalUtilizationRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableRateSlope1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stableRateSlope1()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableRateSlope2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stableRateSlope2()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    variableRateSlope1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "variableRateSlope1()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    variableRateSlope2(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "variableRateSlope2()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
