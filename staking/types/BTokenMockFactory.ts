/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { BTokenMock } from "./BTokenMock";

export class BTokenMockFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(bic: string, overrides?: Overrides): Promise<BTokenMock> {
    return super.deploy(bic, overrides || {}) as Promise<BTokenMock>;
  }
  getDeployTransaction(bic: string, overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(bic, overrides || {});
  }
  attach(address: string): BTokenMock {
    return super.attach(address) as BTokenMock;
  }
  connect(signer: Signer): BTokenMockFactory {
    return super.connect(signer) as BTokenMockFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BTokenMock {
    return new Contract(address, _abi, signerOrProvider) as BTokenMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IbMXXIncentivesController",
        name: "bic",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "emission",
        type: "uint256",
      },
    ],
    name: "AssetConfigUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "AssetIndexUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RewardsAccrued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "UserIndexUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "_bic",
    outputs: [
      {
        internalType: "contract IbMXXIncentivesController",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cleanUserState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getScaledUserBalanceAndSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "userBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    name: "handleActionOnBic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    name: "setUserBalanceAndSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161030438038061030483398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b610273806100916000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630afbcdc91461005c578063b39944ba14610086578063cb06001714610090578063d71222ac146100a3578063f794ca51146100b8575b600080fd5b61006f61006a366004610184565b6100cb565b60405161007d92919061022f565b60405180910390f35b61008e6100d6565b005b61008e61009e3660046101a6565b6100e2565b6100ab61014d565b60405161007d919061021b565b61008e6100c63660046101d9565b61015c565b600154600254915091565b60006001819055600255565b6000546040516318c39f1760e11b81526001600160a01b03909116906331873e2e90610116908690869086906004016101fa565b600060405180830381600087803b15801561013057600080fd5b505af1158015610144573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b031681565b600191909155600255565b80356001600160a01b038116811461017e57600080fd5b92915050565b600060208284031215610195578081fd5b61019f8383610167565b9392505050565b6000806000606084860312156101ba578182fd5b6101c48585610167565b95602085013595506040909401359392505050565b600080604083850312156101eb578182fd5b50508035926020909101359150565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b0391909116815260200190565b91825260208201526040019056fea264697066735822122068948ffd614b3cf17f80962c93c85eb398683f5f85d5f89b53de3a81d3ed44f964736f6c634300060c0033";
