/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction} from 'ethers';
import {Contract, ContractTransaction, Overrides, CallOverrides} from '@ethersproject/contracts';
import {BytesLike} from '@ethersproject/bytes';
import {Listener, Provider} from '@ethersproject/providers';
import {FunctionFragment, EventFragment, Result} from '@ethersproject/abi';

interface bMXXPei2Interface extends ethers.utils.Interface {
  functions: {
    'DISTRIBUTION_CONTROLLER()': FunctionFragment;
    'LENDING_POOL()': FunctionFragment;
    'REWARDS_VAULT()': FunctionFragment;
    'REWARD_TOKEN()': FunctionFragment;
    '_usersUnclaimedRewards(address)': FunctionFragment;
    'claimRewards(uint256,address)': FunctionFragment;
    'getRewardsBalance(address)': FunctionFragment;
    'handleAction(address,address,uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'DISTRIBUTION_CONTROLLER', values?: void): string;
  encodeFunctionData(functionFragment: 'LENDING_POOL', values?: void): string;
  encodeFunctionData(functionFragment: 'REWARDS_VAULT', values?: void): string;
  encodeFunctionData(functionFragment: 'REWARD_TOKEN', values?: void): string;
  encodeFunctionData(functionFragment: '_usersUnclaimedRewards', values: [string]): string;
  encodeFunctionData(functionFragment: 'claimRewards', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'getRewardsBalance', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'handleAction',
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'DISTRIBUTION_CONTROLLER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LENDING_POOL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REWARDS_VAULT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REWARD_TOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_usersUnclaimedRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardsBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'handleAction', data: BytesLike): Result;

  events: {
    'RewardsClaimed(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RewardsClaimed'): EventFragment;
}

export class bMXXPei2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: bMXXPei2Interface;

  functions: {
    DISTRIBUTION_CONTROLLER(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    LENDING_POOL(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    REWARDS_VAULT(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    REWARD_TOKEN(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    _usersUnclaimedRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claimRewards(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRewardsBalance(user: string, overrides?: Overrides): Promise<ContractTransaction>;

    handleAction(
      user: string,
      asset: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DISTRIBUTION_CONTROLLER(overrides?: CallOverrides): Promise<string>;

  LENDING_POOL(overrides?: CallOverrides): Promise<string>;

  REWARDS_VAULT(overrides?: CallOverrides): Promise<string>;

  REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

  _usersUnclaimedRewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimRewards(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRewardsBalance(user: string, overrides?: Overrides): Promise<ContractTransaction>;

  handleAction(
    user: string,
    asset: string,
    userBalance: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  staticCall: {
    DISTRIBUTION_CONTROLLER(overrides?: CallOverrides): Promise<string>;

    LENDING_POOL(overrides?: CallOverrides): Promise<string>;

    REWARDS_VAULT(overrides?: CallOverrides): Promise<string>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

    _usersUnclaimedRewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(amount: BigNumberish, to: string, overrides?: Overrides): Promise<BigNumber>;

    getRewardsBalance(user: string, overrides?: Overrides): Promise<BigNumber>;

    handleAction(
      user: string,
      asset: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;
  };

  filters: {
    RewardsClaimed(user: null, to: null, amount: null): EventFilter;
  };

  estimateGas: {
    DISTRIBUTION_CONTROLLER(): Promise<BigNumber>;
    LENDING_POOL(): Promise<BigNumber>;
    REWARDS_VAULT(): Promise<BigNumber>;
    REWARD_TOKEN(): Promise<BigNumber>;
    _usersUnclaimedRewards(arg0: string): Promise<BigNumber>;
    claimRewards(amount: BigNumberish, to: string): Promise<BigNumber>;
    getRewardsBalance(user: string): Promise<BigNumber>;
    handleAction(
      user: string,
      asset: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DISTRIBUTION_CONTROLLER(): Promise<PopulatedTransaction>;
    LENDING_POOL(): Promise<PopulatedTransaction>;
    REWARDS_VAULT(): Promise<PopulatedTransaction>;
    REWARD_TOKEN(): Promise<PopulatedTransaction>;
    _usersUnclaimedRewards(arg0: string): Promise<PopulatedTransaction>;
    claimRewards(amount: BigNumberish, to: string): Promise<PopulatedTransaction>;
    getRewardsBalance(user: string): Promise<PopulatedTransaction>;
    handleAction(
      user: string,
      asset: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish
    ): Promise<PopulatedTransaction>;
  };
}
